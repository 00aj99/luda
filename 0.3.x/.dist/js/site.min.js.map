{"version":3,"sources":["../../coffee/documentation.coffee","../../coffee/theme.coffee"],"names":["appendAnchors","clipboard","docAsideScrollTop","initClipboard","initCode","insertSubNav","renderCode","luda","document","on","e","$container","get","scrollTop","$codes","each","this","addClass","outerHTML","destroy","ClipboardJS","target","trigger","nextElementSibling","clearSelection","removeClass","text","setTimeout","ready","$titles","items","selectors","length","itemClass","link","id","replace","tagName","toLowerCase","html","prepend","APPLIED_THEME_ATTRIBUTE","APPLIED_THEME_STYLE_ATTRIBUTE","CHANGING_CLASS","HIDDEN_CLASS","SHOW_FOR_THEME_ATTRIBUTE","THEME_PATH_PATTERN_ATTRIBUTE","THEME_PATH_PLACEHOLDER","TRIGGER_SELECTOR","appliedTheme","changeTheme","isChanging","loadTheme","removeOldThemes","toggleThemeElements","data","theme","callback","$appliedTheme","$theme","pathPattern","rel","type","href","onload","replaceWith","appliedThemeName","themeName","remove","$range","toggleClass","value","newBody","timing","requestStart"],"mappings":"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","sourcesContent":["(->\n  docAsideScrollTop = 0\n\n  luda(document).on 'turbolinks:before-visit', (e) ->\n    $container = luda('#doc-aside').get 0\n    docAsideScrollTop = if $container then $container.scrollTop else 0\n\n  luda(document).on 'turbolinks:render', (e) ->\n    $container = luda('#doc-aside').get 0\n    $container.scrollTop = docAsideScrollTop if $container\n\n\n\n  clipboard = null\n\n  renderCode = ->\n    $codes = luda '.highlight:not(.rendered)'\n    $codes.each ->\n      luda(this).addClass('rendered')\n      @outerHTML = \"<div class='rel'>\\\n      <button type='button' \\\n      class='code-copy abs-r abs-t zi-high btn btn-small btn-secondary'>\\\n      Copy</button>#{@outerHTML}</div>\"\n\n  initClipboard = ->\n    clipboard.destroy() if clipboard\n    clipboard = new ClipboardJS('.code-copy', {\n      target: (trigger) -> trigger.nextElementSibling\n    })\n    clipboard.on 'success', (e) ->\n      e.clearSelection()\n      luda(e.trigger)\n      .removeClass('focus btn-secondary')\n      .addClass('btn-primary')\n      .text('Copied!')\n      setTimeout ->\n        luda(e.trigger)\n        .addClass('btn-secondary')\n        .removeClass('btn-primary')\n        .text('Copy')\n      , 2000\n\n  initCode = ->\n    renderCode()\n    initClipboard()\n\n  luda.ready -> initCode()\n  luda(document).on 'turbolinks:render', initCode\n\n\n\n  insertSubNav = ->\n    selectors = '#doc-container h2[id],\\\n    #doc-container h3[id],\\\n    #doc-container h4[id]'\n    $titles = luda selectors\n    items = ''\n    if $titles.length\n      $titles.each ->\n        link = \"<a href='##{@id}' data-turbolinks='false' \\\n        class='doc-sub-nav-item td-none'>\\\n        #{luda(this).text().replace(/^#/, '').replace(/modifier$/i, '')}</a>\"\n        switch @tagName.toLowerCase()\n          when 'h2'\n            itemClass = 'p7 mt-small mb-tiny py-none text-ellipsis'\n          when 'h3'\n            itemClass = 'p7 pl-medium mb-tiny py-none text-ellipsis'\n          else\n            itemClass = 'p7 pl-large mb-tiny py-none text-ellipsis'\n        items += \"<p class='#{itemClass}'>#{link}</p>\"\n      luda('#doc-sub-nav .nav-items').html items\n\n  luda.ready -> insertSubNav()\n  luda(document).on 'turbolinks:render', insertSubNav\n\n\n\n  appendAnchors = ->\n    selectors = '#doc-container h2[id]:not(.rendered),\\\n    #doc-container h3[id]:not(.rendered),\\\n    #doc-container h4[id]:not(.rendered),\\\n    #doc-container h5[id]:not(.rendered),\\\n    #doc-container h6[id]:not(.rendered)'\n    $titles = luda selectors\n    if $titles.length\n      $titles.each ->\n        luda(this).addClass('rendered rel')\n        link = \"<a href='##{@id}' data-turbolinks='false' \\\n        class='doc-anchor abs td-none c-primary'>#</a>\"\n        luda(this).prepend link\n\n  luda.ready -> appendAnchors()\n  luda(document).on 'turbolinks:render', appendAnchors\n)()","(->\n  APPLIED_THEME_ATTRIBUTE = 'data-applied-theme'\n  THEME_PATH_PATTERN_ATTRIBUTE = 'data-theme-path-pattern'\n  THEME_PATH_PLACEHOLDER = '$theme$'\n  APPLIED_THEME_STYLE_ATTRIBUTE = 'data-theme-style'\n  SHOW_FOR_THEME_ATTRIBUTE = 'data-theme'\n  HIDDEN_CLASS = 'd-none'\n  CHANGING_CLASS = 'changing-theme'\n  TRIGGER_SELECTOR = '.change-theme'\n  isChanging = false\n\n\n\n  appliedTheme = ->\n    luda('html').data APPLIED_THEME_ATTRIBUTE\n\n\n\n  loadTheme = (theme, callback) ->\n    pathPattern = luda('html').data THEME_PATH_PATTERN_ATTRIBUTE\n    $appliedTheme = luda \"[#{APPLIED_THEME_STYLE_ATTRIBUTE}]\"\n    $theme = luda '<link>'\n    $theme.get(0).rel = 'stylesheet'\n    $theme.get(0).type = 'text/css'\n    $theme.data APPLIED_THEME_STYLE_ATTRIBUTE, theme\n    $theme.get(0).href = pathPattern.replace THEME_PATH_PLACEHOLDER, theme\n    $theme.get(0).onload = callback\n    $appliedTheme.replaceWith $theme\n\n\n\n  changeTheme = (theme) ->\n    unless isChanging or theme is appliedTheme()\n      isChanging = true\n      luda('html').data APPLIED_THEME_ATTRIBUTE, theme\n      luda('body').addClass CHANGING_CLASS\n      setTimeout(->\n        loadTheme theme, ->\n          toggleThemeElements()\n          luda('body').removeClass CHANGING_CLASS\n          setTimeout(->\n            isChanging = false\n          , 500)\n      , 500)\n\n\n\n  removeOldThemes = ->\n    appliedThemeName = appliedTheme()\n    luda(\"[#{APPLIED_THEME_STYLE_ATTRIBUTE}]\").each ->\n      themeName = luda(this).data APPLIED_THEME_STYLE_ATTRIBUTE\n      luda(this).remove() unless themeName is appliedThemeName\n\n\n\n  toggleThemeElements = ($range) ->\n    appliedThemeName = appliedTheme()\n    luda(\"[#{SHOW_FOR_THEME_ATTRIBUTE}]\", $range).each ->\n      themeName = luda(this).data SHOW_FOR_THEME_ATTRIBUTE\n      luda(this).toggleClass HIDDEN_CLASS, themeName is appliedThemeName\n\n\n\n  luda(document).on 'change', TRIGGER_SELECTOR, -> changeTheme(this.value)\n  luda(document).on 'turbolinks:render', -> removeOldThemes()\n  luda(document).on 'turbolinks:before-render', (e) ->\n    toggleThemeElements(e.data.newBody)\n  luda(document).on 'turbolinks:load', (e) ->\n    toggleThemeElements() unless e.data.timing.requestStart\n)()"]}